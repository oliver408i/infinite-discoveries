import random, time, colorsys, state

#Makes EVE aurorae
def addToEVEAurora(eveCfg, planetName, auroraBright, auroraClr):
    
    eveCfg.write(
        "    OBJECT\n"
        "    {\n"
        "        name = " + planetName + "_AURORAE" + "\n"
        "        body = " + planetName + "\n"
        "        altitude = 15000\n"
        "        settings\n"
        "        {\n"
        "            _Color = " + str(auroraClr[0]) + ", " + str(auroraClr[1]) + ", " + str(auroraClr[2]) + ", " + str(auroraBright) + "\n"
        "            _UVNoiseScale = 0.1\n"
        "            _UVNoiseStrength = 0.01\n"
        "            _MainTex\n"
        "            {\n"
        "                value = InfiniteDiscoveries/Presets/Aurora1\n"
        "            }\n"
        "            _UVNoiseTex\n"
        "            {\n"
        "                value = InfiniteDiscoveries/Visuals/EVE/uvnoise1\n"
        "            }\n"
        "        }\n"
        "        layer2D\n"
        "        {\n"
        "            macroCloudMaterial\n"
        "            {\n"
        "                _MinLight = 1\n"
        "                _RimDistSub = 0.0001\n"
        "            }\n"
        "        }\n"
        "    }\n"
    )
# Adds a PQS fix to gas giants so that they can have EVE clouds applied.
def addPQSFix(evePQSCfg, planetName):
    evePQSCfg.write(
        "    OBJECT\n"
        "    {\n"
        "        body = " + planetName + "\n"
        "        deactivateDistance = 175000\n"
        "        overrideKillSphere:NEEDS[Infinite_VolumetricClouds]\n"
        "        {\n"
        "            altitude = -75000\n"
        "        }\n"
        "    }\n"
    )
# Adds a body to the system's Eve config (but volumetric...)
def addToVolumetricEveCfg(cloudRNG, eveCfg, cloudTexNum, planetName, locked, oceanic, allActions, gasGiant=None):
    volumeRNG = random.Random()
    volumeRNG.seed(cloudRNG)
    allActions.append([time.localtime(),"Writing volumetric EVE config for : " + planetName])
    state.allActionArrayUpdated = True
    if cloudTexNum == 3:
        contrast = 0.9
    else:
        contrast = 0.5
    
    if locked == True:
        density = 0.001
    else:
        density = 0.05
    if gasGiant == None:
        if locked == True:
            eveCfg.write(
                "    OBJECT\n"
                "    {\n"
                "        name = " + planetName + "_CLOUDS" + "\n"
                "        body = " + planetName + "\n"
                "        altitude = 6000\n"
                "        detailSpeed = 0,6,0\n"
                "        offset = 90,0,0\n"
                "        settings\n"
                "        {\n"
                "            _DetailTex = InfiniteDiscoveries/Visuals/EVE/detail1\n"
                "            _DetailScale = 30\n"
                "            _UVNoiseTex = InfiniteDiscoveries/Visuals/EVE/uvnoise1\n"
                "            _Color = 255,255,255, 255\n"
                "            _UVNoiseStrength = 0.00050000001\n"
                "            _MainTex\n"
                "            {\n"
                "                value = Infinite_VolumetricClouds/Textures/LockedClouds" + str(cloudTexNum) + "\n"
                "                type = AlphaMap\n"
                "                alphaMask = ALPHAMAP_R\n"
                "            }\n"
                "            _FlowMap\n"
                "            {\n"
                "            }\n"
                "        }\n"
                "        layer2D\n"
                "        {\n"
                "            shadowMaterial\n"
                "            {\n"
                "            }\n"
                "            macroCloudMaterial\n"
                "            {\n"
                "                _DetailDist = 2E-06\n"
                "            }\n"
                "        }\n"
                "        layerRaymarchedVolume\n"
                "        {\n"
                "            color = 255, 255, 255 255\n"
                "            detailNoiseTiling = 785\n"
                "            upwardsCloudSpeed = 5\n"
                "            scaledFadeStartAltitude = 500000\n"
                "            scaledFadeEndAltitude = 600000\n"
                "            skylightTintMultiplier = 3\n"
                "            raymarchingSettings\n"
                "            {\n"
                "            }\n"
                "            noise\n"
                "            {\n"
                "                worley\n"
                "                {\n"
                "                    octaves = 8\n"
                "                    periods = 3\n"
                "                    brightness = 1.3\n"
                "                    lift = 0.5\n"
                "                    contrast = " + str(contrast) + "\n"
                "                }\n"
                "            }\n"
                "            coverageMap\n"
                "            {\n"
                "                value = Infinite_VolumetricClouds/Textures/LockedClouds" + str(cloudTexNum) + "_coverage\n"
                "                type = AlphaMap\n"
                "                alphaMask = ALPHAMAP_R\n"
                "            }\n"
                "            cloudTypeMap\n"
                "            {\n"
                "                value = Infinite_VolumetricClouds/Textures/cloud_types\n"
                "            }\n"
                "            cloudTypes\n"
                "            {\n"
                "                Item\n"
                "                {\n"
                "                    typeName = Stratus\n"
                "                    minAltitude = 5000\n"
                "                    maxAltitude = 9000\n"
                "                    interpolateCloudHeights = true\n"
                "                    baseNoiseTiling = 1852\n"
                "                    detailNoiseStrength = 0.2\n"
                "                    lightningFrequency = " + str(0) + "\n"
                "                    coverageCurve\n"
                "                    {\n"
                "                        key = 0 0.007974625 3.048113 3.048113\n"
                "                        key = 0.3081625 0.9472886 0.8252979 0.8252979\n"
                "                        key = 0.9876099 -0.002250671 -1.397517 -1.397517\n"
                "                    }\n"
                "                }\n"
                "                Item\n"
                "                {\n"
                "                    typeName = Cumulus 1\n"
                "                    minAltitude = 5000\n"
                "                    maxAltitude = 6000\n"
                "                    baseNoiseTiling = 1852\n"
                "                    density = 0.05\n"
                "                    detailNoiseStrength = 0.1\n"
                "                    lightningFrequency = " + str(volumeRNG.randint(0,2)/10) + "\n"
                "                    coverageCurve\n"
                "                    {\n"
                "                        key = 0.01728953 -0.004032524 1.633945 1.633945\n"
                "                        key = 0.2118766 0.9367786 0.06669102 0.06669102\n"
                "                        key = 0.9732781 -0.006797761 -0.5550035 -0.5550035\n"
                "                    }\n"
                "                }\n"
                "                Item\n"
                "                {\n"
                "                    typeName = Cumulonimbus\n"
                "                    minAltitude = 5000\n"
                "                    maxAltitude = 11000\n"
                "                    detailNoiseStrength = 0.3\n"
                "                    density = 0.05\n"
                "                    interpolateCloudHeights = False\n"
                "                    lightningFrequency = " + str(volumeRNG.randint(0,20)/10) + "\n"
                "                    coverageCurve\n"
                "                    {\n"
                "                        key = 0 0 0 0\n"
                "                        key = 0.03 1 0 -1\n"
                "                        key = 0.6 0.8 1.5 2\n"
                "                        key = 0.7 1 2 5\n"
                "                        key = 0.8 1 -5 -5\n"
                "                        key = 1 0 0 0\n"
                "                    }\n"
                "                }\n"
                "            }\n"
                "            detailNoise\n"
                "            {\n"
                "            }\n"
                "            lightning\n"
                "            {\n"
                "                lightningConfig = lightning\n"
                "            }\n"
                "        }\n"
                "    }\n"
            )
            if oceanic == True or volumeRNG.randint(0,4) == 0:
                eveCfg.write(
                    "    OBJECT\n"
                    "    {\n"
                    "        name = " + planetName + "_RAIN" + "\n"
                    "        body = " + planetName + "\n"
                    "        altitude = 6000\n"
                    "        detailSpeed = 0,6,0\n"
                    "        settings\n"
                    "        {\n"
                    "            _DetailTex = InfiniteDiscoveries/Visuals/EVE/detail1\n"
                    "            _DetailScale = 30\n"
                    "            _UVNoiseTex = InfiniteDiscoveries/Visuals/EVE/uvnoise1\n"
                    "            _Color = 255,255,255, 255\n"
                    "            _UVNoiseStrength = 0.00050000001\n"
                    "            _MainTex\n"
                    "            {\n"
                    "                value = Infinite_VolumetricClouds/Textures/Clouds" + str(cloudTexNum) + "\n"
                    "                type = AlphaMap\n"
                    "                alphaMask = ALPHAMAP_R\n"
                    "            }\n"
                    "            _FlowMap\n"
                    "            {\n"
                    "            }\n"
                    "        }\n"
                    "        layerRaymarchedVolume\n"
                    "        {\n"
                    "            color = 128, 128, 128 255\n"
                    "            detailNoiseTiling = 785\n"
                    "            upwardsCloudSpeed = -10\n"
                    "            scaledFadeStartAltitude = 500000\n"
                    "            scaledFadeEndAltitude = 600000\n"
                    "            skylightTintMultiplier = 3\n"
                    "            raymarchingSettings\n"
                    "            {\n"
                    "               baseStepSize = 450\n"
                    "            }\n"
                    "            noise\n"
                    "            {\n"
                    "                worley\n"
                    "                {\n"
                    "                    octaves = 8\n"
                    "                    periods = 3\n"
                    "                    brightness = 1\n"
                    "                    lift = 0.5\n"
                    "                    contrast = 0.2\n"
                    "                }\n"
                    "            }\n"
                    "            coverageMap\n"
                    "            {\n"
                    "                value = Infinite_VolumetricClouds/Textures/Clouds" + str(cloudTexNum) + "_coverage\n"
                    "                type = AlphaMap\n"
                    "                alphaMask = ALPHAMAP_R\n"
                    "            }\n"
                    "            cloudTypeMap\n"
                    "            {\n"
                    "                value = Infinite_VolumetricClouds/Textures/cloud_types\n"
                    "            }\n"
                    "            cloudTypes\n"
                    "            {\n"
                    "                Item\n"
                    "                {\n"
                    "                    typeName = norain\n"
                    "                    maxAltitude = 6000\n"
                    "                    density = 0\n"
                    "                    particleFieldDensity = 0\n"
                    "                    coverageCurve\n"
                    "                    {\n"
                    "                        key = 0 1 0 0\n"
                    "                        key = 0.5 1 0 0\n"
                    "                        key = 1 0.8 0 0\n"
                    "                    }\n"
                    "                }\n"
                    "                Item\n"
                    "                {\n"
                    "                    typeName = norain\n"
                    "                    maxAltitude = 6000\n"
                    "                    density = 0\n"
                    "                    coverageCurve\n"
                    "                    {\n"
                    "                        key = 0 1 0 0\n"
                    "                        key = 0.5 1 0 0\n"
                    "                        key = 1 0.8 0 0\n"
                    "                    }\n"
                    "                }\n"
                    "                Item\n"
                    "                {\n"
                    "                    typeName = rain\n"
                    "                    maxAltitude = 6000\n"
                    "                    density = 0.002\n"
                    "                    ambientVolume = 5\n"
                    "                    baseNoiseTiling = 1\n"
                    "                    detailNoiseStrength = 0\n"
                    "                    coverageCurve\n"
                    "                    {\n"
                    "                        key = 0 1 0 0\n"
                    "                        key = 0.5 1 0 0\n"
                    "                        key = 1 0.8 0 0\n"
                    "                    }\n"
                    "                }\n"
                    "            }\n"
                    "            detailNoise\n"
                    "            {\n"
                    "            }\n"
                    "            lightning\n"
                    "            {\n"
                    "                lightningConfig = lightning\n"
                    "            }\n"
                    "            particleField\n"
                    "            {\n"
                    "                particleFieldConfig = rain\n"
                    "            }\n"
                    "            ambientSound\n"
                    "            {\n"
                    "                soundName = Infinite_VolumetricClouds/Audio/rain\n"
                    "            }\n"
                    "        }\n"
                    "    }\n"
                )
        else:
            eveCfg.write(
                "    OBJECT\n"
                "    {\n"
                "        name = " + planetName + "_CLOUDS" + "\n"
                "        body = " + planetName + "\n"
                "        altitude = 6000\n"
                "        detailSpeed = 0,6,0\n"
                "        settings\n"
                "        {\n"
                "            _DetailTex = InfiniteDiscoveries/Visuals/EVE/detail1\n"
                "            _DetailScale = 30\n"
                "            _UVNoiseTex = InfiniteDiscoveries/Visuals/EVE/uvnoise1\n"
                "            _Color = 255,255,255, 255\n"
                "            _UVNoiseStrength = 0.00050000001\n"
                "            _MainTex\n"
                "            {\n"
                "                value = Infinite_VolumetricClouds/Textures/Clouds" + str(cloudTexNum) + "\n"
                "                type = AlphaMap\n"
                "                alphaMask = ALPHAMAP_R\n"
                "            }\n"
                "            _FlowMap\n"
                "            {\n"
                "            }\n"
                "        }\n"
                "        layer2D\n"
                "        {\n"
                "            shadowMaterial\n"
                "            {\n"
                "            }\n"
                "            macroCloudMaterial\n"
                "            {\n"
                "                _DetailDist = 2E-06\n"
                "            }\n"
                "        }\n"
                "        layerRaymarchedVolume\n"
                "        {\n"
                "            color = 255, 255, 255 255\n"
                "            detailNoiseTiling = 785\n"
                "            upwardsCloudSpeed = 5\n"
                "            scaledFadeStartAltitude = 500000\n"
                "            scaledFadeEndAltitude = 600000\n"
                "            skylightTintMultiplier = 3\n"
                "            raymarchingSettings\n"
                "            {\n"
                "            }\n"
                "            noise\n"
                "            {\n"
                "                worley\n"
                "                {\n"
                "                    octaves = 8\n"
                "                    periods = 3\n"
                "                    brightness = 1.3\n"
                "                    lift = 0.5\n"
                "                    contrast = " + str(contrast) + "\n"
                "                }\n"
                "            }\n"
                "            coverageMap\n"
                "            {\n"
                "                value = Infinite_VolumetricClouds/Textures/Clouds" + str(cloudTexNum) + "_coverage\n"
                "                type = AlphaMap\n"
                "                alphaMask = ALPHAMAP_R\n"
                "            }\n"
                "            cloudTypeMap\n"
                "            {\n"
                "                value = Infinite_VolumetricClouds/Textures/cloud_types\n"
                "            }\n"
                "            cloudTypes\n"
                "            {\n"
                "                Item\n"
                "                {\n"
                "                    typeName = Stratus\n"
                "                    minAltitude = 5000\n"
                "                    maxAltitude = 9000\n"
                "                    interpolateCloudHeights = true\n"
                "                    baseNoiseTiling = 1852\n"
                "                    detailNoiseStrength = 0.2\n"
                "                    lightningFrequency = " + str(0) + "\n"
                "                    coverageCurve\n"
                "                    {\n"
                "                        key = 0 0.007974625 3.048113 3.048113\n"
                "                        key = 0.3081625 0.9472886 0.8252979 0.8252979\n"
                "                        key = 0.9876099 -0.002250671 -1.397517 -1.397517\n"
                "                    }\n"
                "                }\n"
                "                Item\n"
                "                {\n"
                "                    typeName = Cumulus 1\n"
                "                    minAltitude = 5000\n"
                "                    maxAltitude = 6000\n"
                "                    baseNoiseTiling = 1852\n"
                "                    density = 0.05\n"
                "                    detailNoiseStrength = 0.1\n"
                "                    lightningFrequency = " + str(volumeRNG.randint(0,2)/10) + "\n"
                "                    coverageCurve\n"
                "                    {\n"
                "                        key = 0.01728953 -0.004032524 1.633945 1.633945\n"
                "                        key = 0.2118766 0.9367786 0.06669102 0.06669102\n"
                "                        key = 0.9732781 -0.006797761 -0.5550035 -0.5550035\n"
                "                    }\n"
                "                }\n"
                "                Item\n"
                "                {\n"
                "                    typeName = Cumulonimbus\n"
                "                    minAltitude = 5000\n"
                "                    maxAltitude = 11000\n"
                "                    detailNoiseStrength = 0.3\n"
                "                    density = 0.05\n"
                "                    interpolateCloudHeights = False\n"
                "                    lightningFrequency = " + str(volumeRNG.randint(0,20)/10) + "\n"
                "                    coverageCurve\n"
                "                    {\n"
                "                        key = 0 0 0 0\n"
                "                        key = 0.03 1 0 -1\n"
                "                        key = 0.6 0.8 1.5 2\n"
                "                        key = 0.7 1 2 5\n"
                "                        key = 0.8 1 -5 -5\n"
                "                        key = 1 0 0 0\n"
                "                    }\n"
                "                }\n"
                "            }\n"
                "            detailNoise\n"
                "            {\n"
                "            }\n"
                "            lightning\n"
                "            {\n"
                "                lightningConfig = lightning\n"
                "            }\n"
                "        }\n"
                "    }\n"
            )
            if oceanic == True or volumeRNG.randint(0,4) == 0:
                eveCfg.write(
                    "    OBJECT\n"
                    "    {\n"
                    "        name = " + planetName + "_RAIN" + "\n"
                    "        body = " + planetName + "\n"
                    "        altitude = 6000\n"
                    "        detailSpeed = 0,6,0\n"
                    "        settings\n"
                    "        {\n"
                    "            _DetailTex = InfiniteDiscoveries/Visuals/EVE/detail1\n"
                    "            _DetailScale = 30\n"
                    "            _UVNoiseTex = InfiniteDiscoveries/Visuals/EVE/uvnoise1\n"
                    "            _Color = 255,255,255, 255\n"
                    "            _UVNoiseStrength = 0.00050000001\n"
                    "            _MainTex\n"
                    "            {\n"
                    "                value = Infinite_VolumetricClouds/Textures/Clouds" + str(cloudTexNum) + "\n"
                    "                type = AlphaMap\n"
                    "                alphaMask = ALPHAMAP_R\n"
                    "            }\n"
                    "            _FlowMap\n"
                    "            {\n"
                    "            }\n"
                    "        }\n"
                    "        layerRaymarchedVolume\n"
                    "        {\n"
                    "            color = 128, 128, 128 255\n"
                    "            detailNoiseTiling = 785\n"
                    "            upwardsCloudSpeed = -10\n"
                    "            scaledFadeStartAltitude = 500000\n"
                    "            scaledFadeEndAltitude = 600000\n"
                    "            skylightTintMultiplier = 3\n"
                    "            raymarchingSettings\n"
                    "            {\n"
                    "            }\n"
                    "            noise\n"
                    "            {\n"
                    "                worley\n"
                    "                {\n"
                    "                    octaves = 8\n"
                    "                    periods = 3\n"
                    "                    brightness = 1\n"
                    "                    lift = 0.5\n"
                    "                    contrast = 1\n"
                    "                }\n"
                    "            }\n"
                    "            coverageMap\n"
                    "            {\n"
                    "                value = Infinite_VolumetricClouds/Textures/Clouds" + str(cloudTexNum) + "_coverage\n"
                    "                type = AlphaMap\n"
                    "                alphaMask = ALPHAMAP_R\n"
                    "            }\n"
                    "            cloudTypeMap\n"
                    "            {\n"
                    "                value = Infinite_VolumetricClouds/Textures/cloud_types\n"
                    "            }\n"
                    "            cloudTypes\n"
                    "            {\n"
                    "                Item\n"
                    "                {\n"
                    "                    typeName = norain\n"
                    "                    maxAltitude = 6000\n"
                    "                    density = 0\n"
                    "                    particleFieldDensity = 0\n"
                    "                    coverageCurve\n"
                    "                    {\n"
                    "                        key = 0 1 0 0\n"
                    "                        key = 0.5 1 0 0\n"
                    "                        key = 1 0.8 0 0\n"
                    "                    }\n"
                    "                }\n"
                    "                Item\n"
                    "                {\n"
                    "                    typeName = norain\n"
                    "                    maxAltitude = 6000\n"
                    "                    density = 0\n"
                    "                    coverageCurve\n"
                    "                    {\n"
                    "                        key = 0 1 0 0\n"
                    "                        key = 0.5 1 0 0\n"
                    "                        key = 1 0.8 0 0\n"
                    "                    }\n"
                    "                }\n"
                    "                Item\n"
                    "                {\n"
                    "                    typeName = rain\n"
                    "                    maxAltitude = 6000\n"
                    "                    density = 0.002\n"
                    "                    ambientVolume = 5\n"
                    "                    baseNoiseTiling = 1\n"
                    "                    detailNoiseStrength = 0\n"
                    "                    coverageCurve\n"
                    "                    {\n"
                    "                        key = 0 1 0 0\n"
                    "                        key = 0.5 1 0 0\n"
                    "                        key = 1 0.8 0 0\n"
                    "                    }\n"
                    "                }\n"
                    "            }\n"
                    "            detailNoise\n"
                    "            {\n"
                    "            }\n"
                    "            lightning\n"
                    "            {\n"
                    "                lightningConfig = lightning\n"
                    "            }\n"
                    "            particleField\n"
                    "            {\n"
                    "                particleFieldConfig = rain\n"
                    "            }\n"
                    "            ambientSound\n"
                    "            {\n"
                    "                soundName = Infinite_VolumetricClouds/Audio/rain\n"
                    "            }\n"
                    "        }\n"
                    "    }\n"
                )
    else:
        eveCfg.write(
            "    OBJECT\n"
            "    {\n"
            "        name = " + planetName + "_CLOUDS" + "\n"
            "        body = " + planetName + "\n"
            "        altitude = 6000\n"
            "        detailSpeed = 0,6,0\n"
            "        settings\n"
            "        {\n"
            "            _DetailTex = InfiniteDiscoveries/Visuals/EVE/detail1\n"
            "            _DetailScale = 30\n"
            "            _Color = 255,255,255, 255\n"
            "            _MainTex\n"
            "            {\n"
            "                value = InfiniteDiscoveries/Textures/Clouds/" + str(gasGiant) + "_CLOUDS\n"
            "            }\n"
            "            _FlowMap\n"
            "            {\n"
            "				 texture = Infinite_VolumetricClouds/Textures/FlowMap\n"
            "                speed = 0.01\n"
            "                displacement = 0.5\n"
            "            }\n"
            "        }\n"
            "        layer2D\n"
            "        {\n"
            "            shadowMaterial\n"
            "            {\n"
            "            }\n"
            "            macroCloudMaterial\n"
            "            {\n"
            "                _DetailDist = 2E-06\n"
            "            }\n"
            "        }\n"
            "        layerRaymarchedVolume\n"
            "        {\n"
            "            color = 255, 255, 255 255\n"
            "            detailNoiseTiling = 4000\n"
            "            upwardsCloudSpeed = 5\n"
            "            scaledFadeStartAltitude = 500000\n"
            "            scaledFadeEndAltitude = 600000\n"
            "            skylightTintMultiplier = 3\n"
            "            raymarchingSettings\n"
            "            {\n"
            "            }\n"
            "            noise\n"
            "            {\n"
            "                worley\n"
            "                {\n"
            "                    octaves = 8\n"
            "                    brightness = 1.4\n"
            "                    lift = 0.5\n"
            "                    periods = 3\n"
            "                    contrast = 0.4\n"
            "                }\n"
            "            }\n"
            "            coverageMap\n"
            "            {\n"
            "                value = InfiniteDiscoveries/Textures/Clouds/" + str(gasGiant) + "_CLOUDS\n"
            "                type = AlphaMap\n"
            "                alphaMask = ALPHAMAP_R\n"
            "            }\n"
            "            cloudTypeMap\n"
            "            {\n"
            "                value = Infinite_VolumetricClouds/Textures/cloud_types\n"
            "            }\n"
            "            cloudTypes\n"
            "            {\n"
            "                Item\n"
            "                {\n"
            "                    typeName = Stratus\n"
            "                    interpolateCloudHeights = true\n"
            "                    baseNoiseTiling = 50000\n"
            "                    detailNoiseStrength = 0.2\n"
            "                    lightningFrequency = 10\n"
            "                    minAltitude = -100000\n"
            "                    density = 0.8\n"
            "                    maxAltitude = 15000\n"
            "                    coverageCurve\n"
            "                    {\n"
            "                        key = 0 0.007974625 3.048113 3.048113\n"
            "                        key = 0.3081625 0.9472886 0.8252979 0.8252979\n"
            "                        key = 0.9876099 -0.002250671 -1.397517 -1.397517\n"
            "                    }\n"
            "                }\n"
            "                Item\n"
            "                {\n"
            "                    typeName = Cumulus 1\n"
            "                    baseNoiseTiling = 50000\n"
            "                    detailNoiseStrength = 0.1\n"
            "                    maxAltitude = 15000\n"
            "                    lightningFrequency = 10\n"
            "                    density = 0.8\n"
            "                    minAltitude = -100000\n"
            "                    coverageCurve\n"
            "                    {\n"
            "                        key = 0 0 0 0\n"
            "                        key = 0.05 1 0 0\n"
            "                        key = 0.1 0 0 0\n"
            "                        key = 0.7 1 0 0\n"
            "                        key = 1 0 0 0\n"
            "                    }\n"
            "                }\n"
            "                Item\n"
            "                {\n"
            "                    typeName = Cumulonimbus\n"
            "                    maxAltitude = 15000\n"
            "                    detailNoiseStrength = 0.3\n"
            "                    interpolateCloudHeights = False\n"
            "                    lightningFrequency = 10\n"
            "                    baseNoiseTiling = 50000\n"
            "                    minAltitude = -100000\n"
            "                    coverageCurve\n"
            "                    {\n"
            "                        key = 0 0 0 0\n"
            "                        key = 0.05 0 0 0\n"
            "                        key = 0.1 0 0 0\n"
            "                        key = 0.7 1 0 0\n"
            "                        key = 1 0 0 0\n"
            "                    }\n"
            "                }\n"
            "            }\n"
            "            detailNoise\n"
            "            {\n"
            "            }\n"
            "            lightning\n"
            "            {\n"
            "                lightningConfig = lightning\n"
            "            }\n"
            "            cloudColorMap\n"
            "            {\n"
            "                value = InfiniteDiscoveries/Textures/Clouds/" + str(gasGiant) + "_CLOUDS\n"
            "            }\n"
            "        }\n"
            "    }\n"
        )
# Adds a body to the system's EVE config.
def addToEVECfg(eveCfg, cloudTexNum, planetName, locked, allActions, gasGiant=None):
    allActions.append([time.localtime(),"Writing EVE config for : " + planetName])
    state.allActionArrayUpdated = True
    if gasGiant == None:
        if locked == True:
            eveCfg.write(
                "OBJECT\n"
                "{\n"
                "    name = " + planetName + "_CLOUDS" + "\n"
                "    body = " + planetName + "\n"
                "    altitude = 10000\n"
                "    offset = -90,0,0\n"
                "    settings\n"
                "    {\n"
                "        _UVNoiseScale = 0.02\n"
                "        _UVNoiseStrength = 0.002\n"
                "        _MainTex\n"
                "        {\n"
                "            value = InfiniteDiscoveries/Presets/LockedClouds" + str(cloudTexNum) + "\n"
                "        }\n"
                "        _DetailTex\n"
                "        {\n"
                "            value = InfiniteDiscoveries/Visuals/EVE/detail1\n"
                "        }\n"
                "        _UVNoiseTex\n"
                "        {\n"
                "            value = InfiniteDiscoveries/Visuals/EVE/uvnoise1\n"
                "        }\n"
                "    }\n"
                "    layerVolume\n"
                "    {\n"
                "        maxTranslation = 100,200,100\n"
                "        size = 2000,2.2\n"
                "        area = 18000,4\n"
                "        noiseScale = 1.2,1.3,90\n"
                "        particleMaterial\n"
                "        {\n"
                "            _LightScatter = 0.1\n"
                "            _BumpMap = InfiniteDiscoveries/Visuals/EVE/particle/particle_NRM\n"
                "            _Opacity = 0.5\n"
                "            _MinScatter = 0.5\n"
                "            _Tex\n"
                "            {\n"
                "                value = InfiniteDiscoveries/Visuals/EVE/particle/rgb\n"
                "            }\n"
                "        }\n"
                "    }\n"
                "    layer2D\n"
                "    {\n"
                "        macroCloudMaterial\n"
                "        {\n"
                "            _RimDistSub = 0.0001\n"
                "        }\n"
                "    }\n"
                "}\n"
            )
        else:
            eveCfg.write(
                "    OBJECT\n"
                "    {\n"
                "        name = " + planetName + "_CLOUDS" + "\n"
                "        body = " + planetName + "\n"
                "        altitude = 10000\n"
                "        settings\n"
                "        {\n"
                "            _MainTex\n"
                "            {\n"
                "                value = InfiniteDiscoveries/Presets/Clouds" + str(cloudTexNum) + "\n"
                "            }\n"
                "            _DetailTex\n"
                "            {\n"
                "                value = InfiniteDiscoveries/Visuals/EVE/detail1\n"
                "            }\n"
                "            _UVNoiseTex\n"
                "            {\n"
                "                value = InfiniteDiscoveries/Visuals/EVE/uvnoise1\n"
                "            }\n"
                "        }\n"
                "        layerVolume\n"
                "        {\n"
                "            maxTranslation = 100,200,100\n"
                "            size = 2000,2.2\n"
                "            area = 18000,4\n"
                "            noiseScale = 1.2,1.3,90\n"
                "            particleMaterial\n"
                "            {\n"
                "                _LightScatter = 0.1\n"
                "                _BumpMap = InfiniteDiscoveries/Visuals/EVE/particle/particle_NRM\n"
                "                _Opacity = 0.5\n"
                "                _MinScatter = 0.5\n"
                "                _Tex\n"
                "                {\n"
                "                    value = InfiniteDiscoveries/Visuals/EVE/particle/rgb\n"
                "                }\n"
                "            }\n"
                "        }\n"
                "        layer2D\n"
                "        {\n"
                "            macroCloudMaterial\n"
                "            {\n"
                "                _RimDistSub = 0.0001\n"
                "            }\n"
                "        }\n"
                "    }\n"
            )
    else:
        eveCfg.write(
            "    OBJECT\n"
            "    {\n"
            "        name = " + planetName + "_CLOUDS" + "\n"
            "        body = " + planetName + "\n"
            "        speed = 0,1000,0\n"
            "        altitude = 10000\n"
            "        settings\n"
            "        {\n"
            "            _Color = 255,255,255,200\n"
            "            _UVNoiseStrength = 0.005\n"
            "            _UVNoiseScale = 0.1\n"
            "            _UVNoiseAnimation = 0.2000000000,0.000000000\n"
            "            _MainTex\n"
            "            {\n"
            "                value = InfiniteDiscoveries/Textures/Clouds/" + str(gasGiant) + "_CLOUDS\n"
            "            }\n"
            "            _DetailTex\n"
            "            {\n"
            "                value = InfiniteDiscoveries/Visuals/EVE/detail1\n"
            "            }\n"
            "            _UVNoiseTex\n"
            "            {\n"
            "                value = InfiniteDiscoveries/Visuals/EVE/uvnoise2\n"
            "            }\n"
            "        }\n"
            "        layerVolume\n"
            "        {\n"
            "            maxTranslation = 100,200,100\n"
            "            size = 6000,2.2\n"
            "            area = 18000,4\n"
            "            noiseScale = 1.2,1.3,90\n"
            "            visibleRange = 10000\n"
            "            particleMaterial\n"
            "            {\n"
            "                _LightScatter = 0.1\n"
            "                _BumpMap = InfiniteDiscoveries/Visuals/EVE/particle/particle_NRM\n"
            "                _Opacity = 0.5\n"
            "                _MinScatter = 0.5\n"
            "                _Tex\n"
            "                {\n"
            "                    value = InfiniteDiscoveries/Visuals/EVE/particle/rgb\n"
            "                }\n"
            "            }\n"
            "        }\n"
            "        layer2D\n"
            "        {\n"
            "            macroCloudMaterial\n"
            "            {\n"
            "            }\n"
            "        }\n"
            "    }\n"
        )
# Adds a body to the system's scatterer ocean config.
def addToOceanCfg(seed, oceanCfg, oceanR, oceanG, oceanB, planetName, allActions):
    oceanRNG = random.Random()
    oceanRNG.seed(seed)
    allActions.append([time.localtime(),"Writing scatterer ocean config for : " + planetName])
    state.allActionArrayUpdated = True
    oceanCfg.write(
        "    Ocean\n"
        "    {\n"
        "        name = " + planetName + "\n"
        "        AMP = " + str(oceanRNG.randint(1,50)/10) + "\n"
        "        m_windSpeed = " + str(oceanRNG.randint(30,100)/10) + "\n"
        "        m_omega = 0.699999988\n"
        "        m_gravity = 0\n"
        "        maxWaveInteractionShipAltitude = 500\n"
        "        m_whiteCapStr = 0.319999993\n"
        "        shoreFoam = 1\n"
        "        m_farWhiteCapStr = 0.119999997\n"
        "        m_oceanUpwellingColor = " + str(oceanR/256) + ", " + str(oceanG/256) + ", " + str(oceanB/256) + "\n"
        "        m_UnderwaterColor = " + str(oceanR/256) + ", " + str(oceanG/256) + ", " + str(oceanB/256) + "\n"
        "        offScreenVertexStretch = 1.25\n"
        "        alphaRadius = 1400\n"
        "        transparencyDepth = 100\n"
        "        darknessDepth = 90\n"
        "        refractionIndex = 101.330002\n"
        "        skyReflectionStrength = 2\n"
        "        causticsTexturePath = \n"
        "        causticsLayer1Scale = 0,0\n"
        "        causticsLayer1Speed = 0,0\n"
        "        causticsLayer2Scale = 0,0\n"
        "        causticsLayer2Speed = 0,0\n"
        "        causticsMultiply = 0\n"
        "        causticsUnderwaterLightBoost = 0\n"
        "        causticsMinBrightness = 0\n"
        "        causticsBlurDepth = 0\n"
        "        lightRaysStrength = 1\n"
        "    }\n"
    )
# Adds scatterer sunflares to stars.
def addSunflareCfg(sunfCfg, starColor, starName, starType):
    sunfCfg.write(
        "Scatterer_sunflare:NEEDS[!Infinite_Sunflares]\n"
        "{\n"
        "    " + starName + "\n"
        "    {\n"
        "        syntaxVersion = 2\n"
        "        flareColor = " + str(starColor[0]) + "," + str(starColor[1]) + "," + str(starColor[2]) + "\n"
        "        flares\n"
        "        {\n"
        "            Item\n"
        "            {\n"
        "                texture = Scatterer/config/Sunflares/Sun/sunFlare.png\n"
        "                displayAspectRatio = 1\n"
    )
    if starType == "Neutron":
        sunfCfg.write(
            "                scaleCurve\n"
            "                {\n"
            "                    key = 0 1.5 0 0\n"
            "                    key = 2500000 1.05 -3E-07 -3E-07\n"
            "                    key = 1E+07 0.1 0 0\n"
            "                }\n"
            "                intensityCurve\n"
            "                {\n"
            "                    key = 0 0 0 0\n"
            "                    key = 5 0.8 0 -1.6E-07\n"
            "                    key = 10000000 0.3 0 0\n"
            "                }\n"
        )
    else:
        sunfCfg.write(
            "                scaleCurve\n"
            "                {\n"
            "                    key = 0 1 0 -0.0004\n"
            "                    key = 5000 0.3 -4E-05 -3E-05\n"
            "                    key = 30000 0.1 0 0\n"
            "                }\n"
            "                intensityCurve\n"
            "                {\n"
            "                    key = 0 0 0 0\n"
            "                    key = 5 0.7 0 -7E-05\n"
            "                    key = 30000 0.3 0 0\n"
            "                }\n"
        )
    sunfCfg.write(
        "            }\n"
        "            Item\n"
        "            {\n"
        "                texture = Scatterer/config/Sunflares/Sun/sunSpikes.png\n"
        "                displayAspectRatio = 1\n"
    )
    if starType == "Neutron":
        sunfCfg.write(
            "                scaleCurve\n"
            "                {\n"
            "                    key = 0 1.5 0 0\n"
            "                    key = 2500000 1.05 -3E-07 -3E-07\n"
            "                    key = 1E+07 0.1 0 0\n"
            "                }\n"
            "                intensityCurve\n"
            "                {\n"
            "                    key = 0 0 0 0\n"
            "                    key = 5 0.8 0 -1.6E-07\n"
            "                    key = 10000000 0 0 0\n"
            "                }\n"
        )
    else:
        sunfCfg.write(
            "                scaleCurve\n"
            "                {\n"
            "                    key = 0 1 0 -0.0004\n"
            "                    key = 5000 0.3 -4E-05 -3E-05\n"
            "                    key = 30000 0.1 0 0\n"
            "                }\n"
            "                intensityCurve\n"
            "                {\n"
            "                    key = 0 0 0 0\n"
            "                    key = 5 0.7 0 -7E-05\n"
            "                    key = 30000 0 0 0\n"
            "                }\n"
        )
    sunfCfg.write(
        "            }\n"
        "        }\n"
        "        ghosts\n"
        "        {\n"
        "            Item\n"
        "            {\n"
        "                texture = Scatterer/config/Sunflares/Sun/Ghost1.png\n"
        "                intensityCurve\n"
        "                {\n"
    )
    if starType == "Neutron":
        sunfCfg.write(
            "                key = 2 0.0 0 0\n"
            "                key = 2200 1 0 0\n"
            "                key = 1000000 1 0 0\n"
            "                key = 5000000 0 0 0\n"
        )
    else:
        sunfCfg.write(
            "                key = 0 0.0 0 0\n"
            "                key = 44 1 0 0\n"
            "                key = 2000 1 0 0\n"
            "                key = 10000 0 0 0\n"
        )
    sunfCfg.write(
        "                }\n"
        "                instances\n"
        "                {\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.54\n"
        "                        displayAspectRatio = 0.65\n"
        "                        scale = 0.434\n"
        "                        sunToScreenCenterPosition = 0.5\n"
        "                    }\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.54\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.166\n"
        "                        sunToScreenCenterPosition = 0.7\n"
        "                    }\n"
        "                }\n"
        "            }\n"
        "            Item\n"
        "            {\n"
        "                texture = Scatterer/config/Sunflares/Sun/Ghost2.png\n"
        "                intensityCurve\n"
        "                {\n"
        )
    if starType == "Neutron":
        sunfCfg.write(
            "                key = 2 0.0 0 0\n"
            "                key = 2200 1 0 0\n"
            "                key = 1000000 1 0 0\n"
            "                key = 5000000 0 0 0\n"
        )
    else:
        sunfCfg.write(
            "                key = 0 0.0 0 0\n"
            "                key = 44 1 0 0\n"
            "                key = 2000 1 0 0\n"
            "                key = 10000 0 0 0\n"
        )
    sunfCfg.write(
        "                }\n"
        "                instances\n"
        "                {\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.135\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.333\n"
        "                        sunToScreenCenterPosition = 0.9\n"
        "                    }\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.054\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.125\n"
        "                        sunToScreenCenterPosition = 1.1\n"
        "                    }\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.054\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.25\n"
        "                        sunToScreenCenterPosition = 1.3\n"
        "                    }\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.054\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.2\n"
        "                        sunToScreenCenterPosition = 1.5\n"
        "                    }\n"
        "                }\n"
        "            }\n"
        "        }\n"
        "    }\n"
        "}\n"
    )
    clrHSL = colorsys.rgb_to_hsv(starColor[0],starColor[1],starColor[2])
    clrDesaturated = colorsys.hsv_to_rgb(clrHSL[0], (clrHSL[1]/1.75), clrHSL[2]*1.2)
    sunfCfg.write(
        "Scatterer_sunflare:NEEDS[Infinite_Sunflares]\n"
        "{\n"
        "    " + starName + "\n"
        "    {\n"
        "        syntaxVersion = 2\n"
        "        flareColor = " + str(clrDesaturated[0]) + "," + str(clrDesaturated[1]) + "," + str(clrDesaturated[2]) + "\n"
        "        flares\n"
        "        {\n"
        "            Item\n"
        "            {\n"
        "                texture = Scatterer/config/Sunflares/Sun/sunFlare.png\n"
        "                displayAspectRatio = 1\n"
    )
    if starType == "Neutron":
        sunfCfg.write(
            "                scaleCurve\n"
            "                {\n"
            "                    key = 0 1.5 0 0\n"
            "                    key = 2500000 1.05 -3E-07 -3E-07\n"
            "                    key = 1E+07 0.1 0 0\n"
            "                }\n"
            "                intensityCurve\n"
            "                {\n"
            "                    key = 0 0 0 0\n"
            "                    key = 5 0.8 0 -1.6E-07\n"
            "                    key = 10000000 0.3 0 0\n"
            "                }\n"
        )
    else:
        sunfCfg.write(
            "                scaleCurve\n"
            "                {\n"
            "                    key = 0 1 0 -0.0004\n"
            "                    key = 5000 0.3 -4E-05 -3E-05\n"
            "                    key = 30000 0.1 0 0\n"
            "                }\n"
            "                intensityCurve\n"
            "                {\n"
            "                    key = 0 0 0 0\n"
            "                    key = 5 0.7 0 -7E-05\n"
            "                    key = 30000 0.3 0 0\n"
            "                }\n"
        )
    sunfCfg.write(
        "            }\n"
        "            Item\n"
        "            {\n"
        "                texture = Infinite_Sunflares/Sunflare/sunSpikes.png\n"
        "                displayAspectRatio = 1\n"
    )
    if starType == "Neutron":
        sunfCfg.write(
            "                scaleCurve\n"
            "                {\n"
            "                    key = 0 1.5 0 0\n"
            "                    key = 2500000 1.05 -3E-07 -3E-07\n"
            "                    key = 1E+07 0.1 0 0\n"
            "                }\n"
            "                intensityCurve\n"
            "                {\n"
            "                    key = 0 0 0 0\n"
            "                    key = 5 0.8 0 -1.6E-07\n"
            "                    key = 10000000 0 0 0\n"
            "                }\n"
        )
    else:
        sunfCfg.write(
            "                scaleCurve\n"
            "                {\n"
            "                    key = 0 1 0 -0.0004\n"
            "                    key = 5000 0.3 -4E-05 -3E-05\n"
            "                    key = 30000 0.1 0 0\n"
            "                }\n"
            "                intensityCurve\n"
            "                {\n"
            "                    key = 0 0 0 0\n"
            "                    key = 5 1.2 0 -7E-05\n"
            "                    key = 30000 0 0 0\n"
            "                }\n"
        )
    sunfCfg.write(
        "            }\n"
        "        }\n"
        "        ghosts\n"
        "        {\n"
        "            Item\n"
        "            {\n"
        "                texture = Infinite_Sunflares/Sunflare/Ghost1.png\n"
        "                intensityCurve\n"
        "                {\n"
        )
    if starType == "Neutron":
        sunfCfg.write(
            "                key = 2 0.0 0 0\n"
            "                key = 2200 1 0 0\n"
            "                key = 1000000 1 0 0\n"
            "                key = 5000000 0 0 0\n"
        )
    else:
        sunfCfg.write(
            "                key = 0 0.0 0 0\n"
            "                key = 44 1 0 0\n"
            "                key = 2000 1 0 0\n"
            "                key = 10000 0 0 0\n"
        )
    sunfCfg.write(
        "                }\n"
        "                instances\n"
        "                {\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.4\n"
        "                        displayAspectRatio = 0.85\n"
        "                        scale = 0.8\n"
        "                        sunToScreenCenterPosition = 0.3\n"
        "                    }\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.3\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.3\n"
        "                        sunToScreenCenterPosition = 0.7\n"
        "                    }\n"
        "                }\n"
        "            }\n"
        "            Item\n"
        "            {\n"
        "                texture = Infinite_Sunflares/Sunflare/HexagonRed.png\n"
        "                intensityCurve\n"
        "                {\n"
        )
    if starType == "Neutron":
        sunfCfg.write(
            "                key = 2 0.0 0 0\n"
            "                key = 2200 1 0 0\n"
            "                key = 1000000 1 0 0\n"
            "                key = 5000000 0 0 0\n"
        )
    else:
        sunfCfg.write(
            "                key = 0 0.0 0 0\n"
            "                key = 44 1 0 0\n"
            "                key = 2000 1 0 0\n"
            "                key = 10000 0 0 0\n"
        )
    sunfCfg.write(
        "                }\n"
        "                instances\n"
        "                {\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.135\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.2\n"
        "                        sunToScreenCenterPosition = 0.9\n"
        "                    }\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.1\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.15\n"
        "                        sunToScreenCenterPosition = 1.1\n"
        "                    }\n"
        "                }\n"
        "            }\n"
        "            Item\n"
        "            {\n"
        "                texture = Infinite_Sunflares/Sunflare/HexagonGreen.png\n"
        "                intensityCurve\n"
        "                {\n"
        )
    if starType == "Neutron":
        sunfCfg.write(
            "                key = 2 0.0 0 0\n"
            "                key = 2200 1 0 0\n"
            "                key = 1000000 1 0 0\n"
            "                key = 5000000 0 0 0\n"
        )
    else:
        sunfCfg.write(
            "                key = 0 0.0 0 0\n"
            "                key = 44 1 0 0\n"
            "                key = 2000 1 0 0\n"
            "                key = 10000 0 0 0\n"
        )
    sunfCfg.write(
        "                }\n"
        "                instances\n"
        "                {\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.05\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.15\n"
        "                        sunToScreenCenterPosition = 1.4\n"
        "                    }\n"
        "                    Item\n"
        "                    {\n"
        "                        intensityMultiplier = 0.05\n"
        "                        displayAspectRatio = 1\n"
        "                        scale = 0.15\n"
        "                        sunToScreenCenterPosition = 1.7\n"
        "                    }\n"
        "                }\n"
        "            }\n"
        "        }\n"
        "    }\n"
        "}\n"
    )
# Adds a body to the system's scatterer list.
def addToScattererList(scattererCfg, starName, planetName, starColor, ocean, colorsRound, binaryParents=None, distBinaryParents=None):
    if not binaryParents == None:
        scattererCfg.write(
            "       Item\n"
            "       {\n"
            "            celestialBodyName = " + planetName + "\n"
            "            transformName = " + planetName + "\n"
            "            loadDistance = 500000000\n"
            "            unloadDistance = 1000000000\n"
            "            hasOcean = " + str(ocean) + "\n"
            "            flatScaledSpaceModel = True\n"
            "            usesCloudIntegration = True\n"
            "            cloudIntegrationUsesScattererSunColors = True\n"
            "            mainSunCelestialBody = " + binaryParents[0] + "\n"
            "            sunColor = " + str(colorsRound) + ", " + str(colorsRound) + ", " + str(colorsRound) + "\n"
            "            sunsUseIntensityCurves = True\n"
            "            secondarySuns\n"
            "            {\n"
            "                Item\n"
            "                {\n"
            "                    celestialBodyName = " + binaryParents[1] + "\n"
            "                    sunColor = 1.0,1.0,1.0\n"
            "                }\n"
            "            }\n"
            "        }\n"
        )
    elif not distBinaryParents == None:
        if distBinaryParents[0] == starName:
            otherStar = distBinaryParents[1]
        else:
            otherStar = distBinaryParents[0]
        scattererCfg.write(
            "       Item\n"
            "       {\n"
            "            celestialBodyName = " + planetName + "\n"
            "            transformName = " + planetName + "\n"
            "            loadDistance = 500000000\n"
            "            unloadDistance = 1000000000\n"
            "            hasOcean = " + str(ocean) + "\n"
            "            flatScaledSpaceModel = True\n"
            "            usesCloudIntegration = True\n"
            "            cloudIntegrationUsesScattererSunColors = True\n"
            "            mainSunCelestialBody = " + starName + "\n"
            "            sunColor = " + str(colorsRound) + ", " + str(colorsRound) + ", " + str(colorsRound) + "\n"
            "            sunsUseIntensityCurves = True\n"
            "            secondarySuns\n"
            "            {\n"
            "                Item\n"
            "                {\n"
            "                    celestialBodyName = " + otherStar + "\n"
            "                    sunColor = 1.0,1.0,1.0\n"
            "                }\n"
            "            }\n"
            "        }\n"
        )
    else:
        scattererCfg.write(
            "       Item\n"
            "       {\n"
            "            celestialBodyName = " + planetName + "\n"
            "            transformName = " + planetName + "\n"
            "            loadDistance = 500000000\n"
            "            unloadDistance = 1000000000\n"
            "            hasOcean = " + str(ocean) + "\n"
            "            flatScaledSpaceModel = True\n"
            "            usesCloudIntegration = True\n"
            "            cloudIntegrationUsesScattererSunColors = True\n"
            "            mainSunCelestialBody = " + starName + "\n"
            "            sunColor = " + str(colorsRound) + ", " + str(colorsRound) + ", " + str(colorsRound) + "\n"
            "            sunsUseIntensityCurves = True\n"
            "        }\n"
        )
# Adds a body to the system's scatterer atmosphere config.
def addToAtmoCfg(atmoCfg, starName, planetName, starColor, sctrClrR, sctrClrG, sctrClrB, ocean, gasGiant, atmoHeight, atmoPressure, allActions):
    allActions.append([time.localtime(),"Writing scatterer atmo config for : " + planetName])
    state.allActionArrayUpdated = True
    if gasGiant == False:
        thicknessMult = ((atmoPressure/101.3)+1)/2
    else:
        thicknessMult = 1.5
    print(planetName + " ------------------------------------------ " + str(thicknessMult))
    atmoCfg.write(
        "    Atmo:NEEDS[!Infinite_VolumetricClouds]\n"
        "    {\n"
        "        name = " + planetName + "\n"
        "        atmosphereStartRadiusScale = 1\n"
    )
    if gasGiant == False:
        atmoCfg.write(
            "        HR = " + str(atmoHeight/20000) + "\n"
        )
    else:
        atmoCfg.write(
            "        HR = 15\n"
        )
    atmoCfg.write(
        "        HM = 1.79999995\n"
    )
    if gasGiant == False:
        atmoCfg.write(
            "        m_betaR = " + str(((sctrClrR/256)/50)*thicknessMult) + "," + str(((sctrClrG/256)/50)*thicknessMult) + "," + str(((sctrClrB/256)/50)*thicknessMult) + "\n"
            "        BETA_MSca = " + str(((sctrClrR/256)/50)*thicknessMult) + "," + str(((sctrClrG/256)/50)*thicknessMult) + "," + str(((sctrClrB/256)/50)*thicknessMult) + "\n"
        )
    else:
        atmoCfg.write(
            "        m_betaR = " + str((((sctrClrR/256)/50)*thicknessMult)*0.2) + "," + str((((sctrClrG/256)/50)*thicknessMult)*0.2) + "," + str((((sctrClrB/256)/50)*thicknessMult)*0.2) + "\n"
            "        BETA_MSca = " + str((((sctrClrR/256)/50)*thicknessMult)*0.2) + "," + str((((sctrClrG/256)/50)*thicknessMult)*0.2) + "," + str((((sctrClrB/256)/50)*thicknessMult)*0.2) + "\n"
        )
    atmoCfg.write(
        "        m_mieG = 0.850000024\n"
        "        averageGroundReflectance = 0.5\n"
        "        multipleScattering = True\n"
        "        godrayStrength = 0.5\n"
        "        flattenScaledSpaceMesh = 0.600000024\n"
        "        rimBlend = 1\n"
        "        rimpower = 5\n"
    )

    if ocean == True:
        atmoCfg.write(
            "        specR = 50\n"
            "        specG = 50\n"
            "        specB = 50\n"
        )
    else:
        atmoCfg.write(
            "        specR = 0\n"
            "        specG = 0\n"
            "        specB = 0\n"
        )
    if gasGiant == True:
        atmoCfg.write(
            "        shininess = 30\n"
            "        cloudColorMultiplier = 1.2\n"
            "        cloudScatteringMultiplier = 1.100000003\n"
            "        cloudSkyIrradianceMultiplier = 0.0000000000\n"
            "        volumetricsColorMultiplier = 1\n"
        )
    else:
        atmoCfg.write(
            "        shininess = 30\n"
            "        cloudColorMultiplier = 1.1\n"
            "        cloudScatteringMultiplier = 0.100000003\n"
            "        cloudSkyIrradianceMultiplier = 2.2000000007\n"
            "        volumetricsColorMultiplier = 1\n"
        )
    if gasGiant == True:
        atmoCfg.write(
            "        EVEIntegration_preserveCloudColors = False\n"
        )
    else:
        atmoCfg.write(
            "        EVEIntegration_preserveCloudColors = False\n"
        )
    atmoCfg.write(
        "        adjustScaledTexture = False\n"
        "        scaledLandBrightnessAdjust = 1\n"
        "        scaledLandContrastAdjust = 1\n"
        "        scaledLandSaturationAdjust = 1\n"
        "        scaledOceanBrightnessAdjust = 1\n"
        "        scaledOceanContrastAdjust = 1\n"
        "        scaledOceanSaturationAdjust = 1\n"
        "        configPoints\n"
        "        {\n"
        "            Item\n"
        "            {\n"
        "                altitude = 200\n"
        "                skyExposure = 0.25\n"
        "                skyAlpha = 1\n"
        "                skyExtinctionTint = 1\n"
        "                scatteringExposure = 0.230000004\n"
        "                extinctionThickness = 1\n"
        "                postProcessAlpha = 1\n"
        "                postProcessDepth = 0.125\n"
        "                extinctionTint = 0.5\n"
        "            }\n"
        "        }\n"
        "    }\n"
    )
    atmoCfg.write(
        "    Atmo:NEEDS[Infinite_VolumetricClouds]\n"
        "    {\n"
        "        name = " + planetName + "\n"
        "        atmosphereStartRadiusScale = 1\n"
    )
    if gasGiant == False:
        atmoCfg.write(
            "        HR = " + str(atmoHeight/15000) + "\n"
        )
    else:
        atmoCfg.write(
            "        HR = 15\n"
        )
    atmoCfg.write(
        "        HM = 1.79999995\n"
        )
    if gasGiant == False:
        atmoCfg.write(
            "        m_betaR = " + str(((sctrClrR/256)/50)*thicknessMult) + "," + str(((sctrClrG/256)/50)*thicknessMult) + "," + str(((sctrClrB/256)/50)*thicknessMult) + "\n"
            "        BETA_MSca = " + str(((sctrClrR/256)/50)*thicknessMult) + "," + str(((sctrClrG/256)/50)*thicknessMult) + "," + str(((sctrClrB/256)/50)*thicknessMult) + "\n"
        )
    else:
        atmoCfg.write(
            "        m_betaR = " + str((((sctrClrR/256)/50)*thicknessMult)*0.2) + "," + str((((sctrClrG/256)/50)*thicknessMult)*0.2) + "," + str((((sctrClrB/256)/50)*thicknessMult)*0.2) + "\n"
            "        BETA_MSca = " + str((((sctrClrR/256)/50)*thicknessMult)*0.2) + "," + str((((sctrClrG/256)/50)*thicknessMult)*0.2) + "," + str((((sctrClrB/256)/50)*thicknessMult)*0.2) + "\n"
        )
    atmoCfg.write(
        "        m_mieG = 0.850000024\n"
        "        averageGroundReflectance = 0.5\n"
        "        multipleScattering = True\n"
        "        godrayStrength = 0.5\n"
        "        flattenScaledSpaceMesh = 0.600000024\n"
        "        rimBlend = 1\n"
        "        rimpower = 5\n"
    )

    if ocean == True:
        atmoCfg.write(
            "        specR = 50\n"
            "        specG = 50\n"
            "        specB = 50\n"
        )
    else:
        atmoCfg.write(
            "        specR = 0\n"
            "        specG = 0\n"
            "        specB = 0\n"
        )
    if gasGiant == True:
        atmoCfg.write(
            "        shininess = 30\n"
            "        cloudColorMultiplier = 1.2\n"
            "        cloudScatteringMultiplier = 1.100000003\n"
            "        cloudSkyIrradianceMultiplier = 0.0000000000\n"
            "        volumetricsColorMultiplier = 1\n"
        )
    else:
        atmoCfg.write(
            "        shininess = 30\n"
            "        cloudColorMultiplier = 1.1\n"
            "        cloudScatteringMultiplier = 0.100000003\n"
            "        cloudSkyIrradianceMultiplier = 2.2000000007\n"
            "        volumetricsColorMultiplier = 1\n"
        )
    if gasGiant == True:
        atmoCfg.write(
            "        EVEIntegration_preserveCloudColors = False\n"
        )
    else:
        atmoCfg.write(
            "        EVEIntegration_preserveCloudColors = False\n"
        )
    atmoCfg.write(
        "        adjustScaledTexture = False\n"
        "        scaledLandBrightnessAdjust = 1\n"
        "        scaledLandContrastAdjust = 1\n"
        "        scaledLandSaturationAdjust = 1\n"
        "        scaledOceanBrightnessAdjust = 1\n"
        "        scaledOceanContrastAdjust = 1\n"
        "        scaledOceanSaturationAdjust = 1\n"
        "        configPoints\n"
        "        {\n"
        "            Item\n"
        "            {\n"
        "                altitude = 200\n"
        "                skyExposure = 0.25\n"
        "                skyAlpha = 1\n"
        "                skyExtinctionTint = 1\n"
        "                scatteringExposure = 0.230000004\n"
        "                extinctionThickness = 1\n"
        "                postProcessAlpha = 1\n"
        "                postProcessDepth = 0.125\n"
        "                extinctionTint = 0.5\n"
        "            }\n"
        "        }\n"
        "    }\n"
    )