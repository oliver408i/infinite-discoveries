import random, time, state
from PIL import Image, ImageChops

# Generates rings.
def genRing(seed, planetName, targetPath):
    ringRNG = random.Random()
    ringRNG.seed(seed)
    ring1 = Image.open(targetPath + "/Presets/" + "Ring" + str(1) + ".png")
    ringOffs1 = ImageChops.offset(ring1, ringRNG.randint(0,1024),0)
    bands = ringOffs1.split()
    randomMult = random.randint(1,10)/10
    print(randomMult)
    adj_alpha = bands[3].point(lambda x: int(x * randomMult))
    ringAlph = Image.merge('RGBA', [*bands[:3], adj_alpha])
    ringAlph.save(targetPath + "/Textures/PluginData/" + planetName + "_RINGS" + ".png")

# Writes planet/moon configs.
def writeBodyCfg(planetCfgSeed, planetCfg, planetName, planetRadius, planetMass, planetSMA, parentN, atmo, atmoPress, templ, atmClrR, atmClrG, atmClrB, sctrClrR, sctrClrG, sctrClrB, terrainClr, moon, gasGiant, rings, ringInn, ringOut, ocean, oceanR, oceanG, oceanB, atmoHeight, finalTemp, oxygen, life, dispName, anomaly, anLatLon, Tag, Lava, tidallyLocked, oceanFactor, isAsteroid, icy, inclinationLimits, sciValue, allActions, templates, canConvertToDDS):
    planetCfgRNG = random.Random()
    planetCfgRNG.seed(planetCfgSeed)
    allActions.append([time.localtime(),"Writing config for body: " + planetName])
    state.allActionArrayUpdated = True
    
    description = ""
    if moon == True:
        description = planetName + " is a moon"

        if not life == None:
            description = description + " <color=#bada55>with " + life + " life</color>"

        description = description + " generated by Infinite Discoveries, roughly " + str(round(planetRadius / 200000, 2)) + " times the size of The Mun!\\n"

        if atmo == "Atmospheric":
            description = description + "This moon has an atmosphere with a pressure of " + str(round(atmoPress, 2)) + " kilopascals (" + str(round(atmoPress/101.3, 2)) + " atmospheres.)\\n"
        else:
            description = description + "This moon has no atmosphere.\\n"

        if ocean == True:
            description = description + "This moon has oceans.\\n"
        else:
            description = description + "This moon has no oceans.\\n"
    elif isAsteroid == True:
        description = planetName + " is an asteroid"

        description = description + " generated by Infinite Discoveries, roughly " + str(round(planetRadius / 200000, 2)) + " times the size of Gilly!\\n"
    else:
        description = planetName + " is a planet"

        if not life == None:
            description = description + " <color=#bada55>with " + life + " life</color>"

        description = description + " generated by Infinite Discoveries, roughly " + str(round(planetRadius / 600000, 2)) + " times the size of Kerbin!\\n"

        if atmo == "Atmospheric":
            description = description + "This planet has an atmosphere with a pressure of " + str(round(atmoPress, 2)) + " kilopascals (" + str(round(atmoPress/101.3, 2)) + " atmospheres.)\\n"
        else:
            description = description + "This planet has no atmosphere.\\n"

        if ocean == True:
            description = description + "This planet has oceans.\\n"
        else:
            description = description + "This planet has no oceans.\\n"

        if tidallyLocked == True:
            description = description + "This planet is tidally locked.\\n"
        else:
            description = description + "This planet is not tidally locked.\\n"
    
    planetCfg.write(
        "@Kopernicus:AFTER[Kopernicus]\n"
        "{\n"
        "    Body\n"
        "    {\n"
        "        name = " + planetName + "\n"
        "        cacheFile = InfiniteDiscoveries/Cache/" + planetName + ".bin" + "\n"
        "        Tag = " + Tag + "\n"
        "        Template\n"
        "        {\n"
        "            name = " + templates[templ] + "\n"
        "            removeAllPQSMods = true\n"
        "        }\n"
        "        Properties\n"
        "        {\n"
        "            displayName = " + dispName + "^N" + "\n"
        "            radius = " + str(planetRadius) + "\n"
        #"            mass = " + str(planetMass) + "\n"
    )
    if planetRadius < 30000:
        planetCfg.write(
            "            geeASL = " + str(planetRadius/300000) + "\n"
        )
    else:
        if gasGiant == False:
            planetCfg.write(
                "            geeASL = " + str((planetRadius/600000)*(random.randint(900,1100)/1000)) + "\n"
            )
        else:
            planetCfg.write(
                "            geeASL = " + str((planetRadius/6000000)*(random.randint(900,1100)/1000)) + "\n"
            )
    
    planetCfg.write(
        "            rotationPeriod = " + str(planetCfgRNG.randint(360,360000)) + "\n"
        "            initialRotation = 0\n"
    )
    if tidallyLocked == True:
        planetCfg.write(
            "            tidallyLocked = true\n"
        )
    else:
        planetCfg.write(
            "            tidallyLocked = false\n"
        )
    planetCfg.write(
        "            description = " + description + "\n"
        "            ScienceValues\n"
        "            {\n"
        "                landedDataValue = " + str(int(sciValue)) + "\n"
        "                flyingLowDataValue = " + str(int(sciValue/4)) + "\n"
        "                flyingHighDataValue = " + str(int(sciValue/4)) + "\n"
        "                inSpaceLowDataValue = " + str(int(sciValue/2)) + "\n"
        "                inSpaceHighDataValue = " + str(int(sciValue/3)) + "\n"
        "                recoveryValue = " + str(int(sciValue)) + "\n"
        "                flyingAltitudeThreshold = " + str(int(atmoHeight/2)) + "\n"
        "                spaceAltitudeThreshold = 1E+09\n"
        "            }\n"	
    )
    if gasGiant == False:
        planetCfg.write(
            "            biomeMap = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_BIO" + ".png" + "\n"
            "	         Biomes\n"
            "            {\n"
            "                Biome\n"
            "                {\n"
            "                    name = Lowlands\n"
            "                    displayName = Lowlands\n"
            "                    value = 1.0\n"
            "                    color = RGB(0,0,0)\n"
            "                }\n"  
            "                Biome\n"
            "                {\n"
            "                    name = Midlands\n"
            "                    displayName = Midlands\n"
            "                    value = 1.0\n"
            "                    color = RGB(64,64,64)\n"
            "                }\n"        
            "                Biome\n"
            "                {\n"
            "                    name = Highlands\n"
            "                    displayName = Lowlands\n"
            "                    value = 1.0\n"
            "                    color = RGB(128,128,128)\n"
            "                }\n"  
            "                Biome\n"
            "                {\n"
            "                    name = Peaks\n"
            "                    displayName = Peaks\n"
            "                    value = 1.0\n"
            "                    color = RGB(192,192,192)\n"
            "                }\n"  
            "                Biome\n"
            "                {\n"
            "                    name = Icecaps\n"
            "                    displayName = Icecaps\n"
            "                    value = 1.2\n"
            "                    color = RGB(150,200,255)\n"
            "                }\n"
            "                Biome\n"
            "                {\n"
            "                    name = Oceans\n"
            "                    displayName = Oceans\n"
            "                    value = 1.5\n"
            "                    color = RGB(0, 0, 50)\n"
            "                }\n"
            "                Biome\n"
            "                {\n"
            "                    name = Mountains\n"
            "                    displayName = Mountains\n"
            "                    value = 1.0\n"
            "                    color = RGB(255,255,0)\n"
            "                }\n"
            "                Biome\n"
            "                {\n"
            "                    name = Volcanoes\n"
            "                    displayName = Volcanoes\n"
            "                    value = 1.5\n"
            "                    color = RGB(255,0,0)\n"
            "                }\n"
            "                Biome\n"
            "                {\n"
            "                    name = Lava\n"
            "                    displayName = Lava\n"
            "                    value = 2.0\n"
            "                    color = RGB(255,98,0)\n"
            "                }\n"
            "                Biome\n"
            "                {\n"
            "                    name = Canyons\n"
            "                    displayName = Canyons\n"
            "                    value = 1.0\n"
            "                    color = RGB(255,0,255)\n"
            "                }\n"
            "                Biome\n"
            "                {\n"
            "                    name = Crater_Rays\n"
            "                    displayName = Crater Rays\n"
            "                    value = 1.0\n"
            "                    color = RGB(150, 255, 150)\n"
            "                }\n"
            "                Biome\n"
            "                {\n"
            "                    name = Craters\n"
            "                    displayName = Craters\n"
            "                    value = 1.0\n"
            "                    color = RGB(0, 255, 150)\n"
            "                }\n"
            "                Biome\n"
            "                {\n"
            "                    name = AnomalousStructure\n"
            "                    displayName = Anomalous Structure\n"
            "                    value = 1.0\n"
            "                    color = RGB(119, 198, 247)\n"
            "                }\n"
            "                Biome\n"
            "                {\n"
            "                    name = CrashedShip\n"
            "                    displayName = Crashed Ship\n"
            "                    value = 1.0\n"
            "                    color = RGB(82, 96, 105)\n"
            "                }\n"
            "            }\n"
        )
    planetCfg.write(
        "        }\n"
    )
    if isAsteroid == True:
        planetCfg.write(
            "        Orbit\n"
            "        {\n"
            "            referenceBody = " + parentN + "\n"
            "            color = RGBA(" + terrainClr + ")\n"
            "            semiMajorAxis = " + str(planetSMA) + "\n"
            "            inclination = " + str(planetCfgRNG.randint(inclinationLimits[0],inclinationLimits[1])) + "\n"
            "            eccentricity = " + str(planetCfgRNG.randint(0,600)/1000) + "\n"
            "            longitudeOfAscendingNode = 0\n"
            "            argumentOfPeriapsis = 0\n"
            "            meanAnomalyAtEpochD = " + str(planetCfgRNG.randint(0,360)) + "\n"
            "            epoch = 0\n"
        )
    else:
        if tidallyLocked == True:
            planetCfg.write(
                "        Orbit\n"
                "        {\n"
                "            referenceBody = " + parentN + "\n"
                "            color = RGBA(" + terrainClr + ")\n"
                "            semiMajorAxis = " + str(planetSMA) + "\n"
                "            inclination = " + str(planetCfgRNG.randint(inclinationLimits[0],inclinationLimits[1])) + "\n"
                "            eccentricity = " + str(planetCfgRNG.randint(0,10)/1000) + "\n"
                "            longitudeOfAscendingNode = 90\n"
                "            argumentOfPeriapsis = 0\n"
                "            meanAnomalyAtEpochD = " + str(0) + "\n"
                "            epoch = 0\n"
            )
        else:
            planetCfg.write(
                "        Orbit\n"
                "        {\n"
                "            referenceBody = " + parentN + "\n"
                "            color = RGBA(" + terrainClr + ")\n"
                "            semiMajorAxis = " + str(planetSMA) + "\n"
                "            inclination = " + str(planetCfgRNG.randint(inclinationLimits[0],inclinationLimits[1])) + "\n"
                "            eccentricity = " + str(planetCfgRNG.randint(0,200)/1000) + "\n"
                "            longitudeOfAscendingNode = 0\n"
                "            argumentOfPeriapsis = 0\n"
                "            meanAnomalyAtEpochD = " + str(planetCfgRNG.randint(0,360)) + "\n"
                "            epoch = 0\n"
            )
    if atmo == "Atmospheric":
        if gasGiant == True:
            if rings == True:
                planetCfg.write(
                    "            iconTexture = InfiniteDiscoveries/Textures/Misc/gasGiantRingedIco.png\n"
                )
            else:
                planetCfg.write(
                    "            iconTexture = InfiniteDiscoveries/Textures/Misc/gasGiantIco.png\n"
                )
        else:
            if rings == True:
                planetCfg.write(
                    "            iconTexture = InfiniteDiscoveries/Textures/Misc/rockAtmoRingedIco.png\n"
                )
            else:
                planetCfg.write(
                    "            iconTexture = InfiniteDiscoveries/Textures/Misc/rockAtmoIco.png\n"
                )
    else:
        if rings == True:
            planetCfg.write(
                "            iconTexture = InfiniteDiscoveries/Textures/Misc/rockVacuumRingedIco.png\n"
            )
        else:
            planetCfg.write(
                "            iconTexture = InfiniteDiscoveries/Textures/Misc/rockVacuumIco.png\n"
            )
    planetCfg.write(
        "        }\n"
        "        ScaledVersion\n"
        "        {\n"
        "            type = " + atmo + "\n"
        "            Material\n"
        "            {\n"
    )
    if canConvertToDDS == True:
        planetCfg.write(
            "                texture = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_CLR" + ".dds" + "\n"
            "                normals = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_NRM" + ".dds" + "\n"
            "                color = 1,1,1,1\n"
        )
    else:
        planetCfg.write(
            "                texture = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_CLR" + ".png" + "\n"
            "                normals = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_NRM" + ".png" + "\n"
            "                color = 1,1,1,1\n"
        )
    if ocean == True:
        planetCfg.write(
            "                specColor = 0.5, 0.5, 0.5, 1\n"
            "                shininess = 0.3\n"
        )
    elif icy == True:
        planetCfg.write(
            "                specColor = 0.3, 0.3, 0.3, 1\n"
            "                shininess = 0.1\n"
        )
    else:
        planetCfg.write(
            "                specColor = 0, 0, 0, 1\n"
            "                shininess = 0.3\n"
        )
    planetCfg.write(
        "\n"
        "                rimPower = 1\n"
        "		         rimBlend = 0.5\n"
        "                Gradient\n"
        "                {\n"
        "                    0.0 = RGBA(" + str(sctrClrR) + ", " + str(sctrClrG) + ", " + str(sctrClrB) + ", 100" + ")\n"
        "                    0.3 = RGBA(" + str(atmClrR/2) + ", " + str(atmClrG/2) + ", " + str(atmClrB/2) + ", 100" + ")\n"
        "                    0.6 = RGBA(0, 0, 0, 0)\n"
        "                    1 = RGBA(0, 0, 0, 0)\n"
        "                }\n"
        "            }\n"
        "        }\n"
    )
    planetCfg.write(
        "        Rings\n"
        "        {\n"
        "           Ring\n"
        "            {\n"
        
        "\n"
        "                thickness = 0\n"
        "                steps = 120\n"
        "\n"
    )
    if rings == True:
        planetCfg.write(
        "                innerRadius = " + str(ringInn) + "\n"
        "                outerRadius = " + str(ringOut) + "\n"
        "                texture = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_RINGS" + ".png\n"
        )
    else:
        planetCfg.write(
        "                innerRadius = 2000\n"
        "                outerRadius = 2001\n"
        "                texture = InfiniteDiscoveries/Presets/RingNone.png\n"
        )
    planetCfg.write(
        "                tiles = 0\n"
        "                color = 1,1,1,1\n"
        "                unlit = false\n"
        "                useNewShader = true\n"
        "                penumbraMultiplier = 1\n"
        "\n"
        "                angle = 0\n"
        "                lockRotation = true\n"
        "                longitudeOfAscendingNode = 30\n"
        "                rotationPeriod = 600\n"
        "            }\n"
        "        }\n"
    )
    if ocean == True:
        planetCfg.write(
        "        Ocean\n"
        "        {\n"
        "            ocean = True\n"
        "            oceanColor = RGBA(" + str(oceanR) + ", " + str(oceanG) + ", " + str(oceanB) + ", 100)\n"
        "            oceanHeight = 0\n"
        "            density = 1\n"
        "            minLevel = 1\n"
        "            maxLevel = 10\n"
        "            minDetailDistance = 8\n"
        "            maxQuadLengthsPerFrame = 0.03\n"
        "            Material\n"
        "            {\n"
        "                color = RGBA(" + str(oceanR) + ", " + str(oceanG) + ", " + str(oceanB) + ", 100)\n"
        "                colorFromSpace = RGBA(" + str(oceanR) + ", " + str(oceanG) + ", " + str(oceanB) + ", 100)\n"
        "                specColor = 1,1,1,1\n"
        "                shininess = 1\n"
        "                gloss = 0.2\n"
        "                tiling = 1000\n"
        "                waterTex = BUILTIN/sea-water8\n"
        "                waterTexScale = 1,1\n"
        "                waterTexOffset = 0,0\n"
        "                waterTex1 = BUILTIN/sea-water1\n"
        "                waterTex1Scale = 1,1\n"
        "                waterTex1Offset = 0,0\n"
        "                bTiling = 800\n"
        "                bumpMap = BUILTIN/quiet\n"
        "                bumpMapScale = 1,1\n"
        "                bumpMapOffset = 0,0\n"
        "                displacement = 0.05\n"
        "                texDisplacement = 0.31\n"
        "                dispFreq = 0.15\n"
        "                mix = 0.4032745\n"
        "                oceanOpacity = 0.3\n"
        "                falloffPower = 3\n"
        "                falloffExp = 0.05\n"
        "                fogColor = 0.321443439,0.611232221,0.947761178,1\n"
        "                heightFallOff = 0.2\n"
        "                globalDensity = -8E-06\n"
        "                atmosphereDepth = 50000\n"
        "                //fogColorRamp = BUILTIN/blue_atmogradient\n"
        "                fogColorRampScale = 1,1\n"
        "                fogColorRampOffset = 0,0\n"
        "                fadeStart = 20000\n"
        "                fadeEnd = 60000\n"
        "                planetOpacity = 1\n"
        "                normalXYFudge = 1.4\n"
        "                normalZFudge = 1.18\n"
        "            }\n"
        "            FallbackMaterial\n"
        "            {\n"
        "                color = RGBA(" + str(oceanR) + ", " + str(oceanG) + ", " + str(oceanB) + ", 100)\n"
        "                colorFromSpace = RGBA(" + str(oceanR) + ", " + str(oceanG) + ", " + str(oceanB) + ", 100)\n"
        "                specColor = 0.8493402,0.8493402,0.8493402,1\n"
        "                shininess = 1\n"
        "                gloss = 0.3336538\n"
        "                tiling = 1000\n"
        "                waterTex = BUILTIN/sea-water1\n"
        "                waterTexScale = 1,1\n"
        "                waterTexOffset = 0,0\n"
        "                waterTex1 = BUILTIN/sea-water2\n"
        "                waterTex1Scale = 1,1\n"
        "                waterTex1Offset = 0,0\n"
        "                fadeStart = 20000\n"
        "                fadeEnd = 60000\n"
        "                planetOpacity = 1\n"
        "            }\n"
        "            Fog\n"
        "            {\n"
        "                afgAltMult = 0.05\n"
        "                afgBase = 0.6\n"
        "                afgLerp = False\n"
        "                afgMin = 0.05\n"
        "                fogColorEnd = 0,0.0850000009,0.122500002,1\n"
        "                fogColorStart = 0,0.340000004,0.49000001,1\n"
        "                fogDensityAltScalar = -0.0008\n"
        "                fogDensityEnd = 0.025\n"
        "                fogDensityExponent = 1\n"
        "                fogDensityPQSMult = 0.02\n"
        "                fogDensityStart = 0.005\n"
        "                skyColorMult = 1.1\n"
        "                skyColorOpacityAltMult = 15\n"
        "                skyColorOpacityBase = 0.25\n"
        "                sunAltMult = 0.01\n"
        "                sunBase = 0.5\n"
        "                sunMin = 0.05\n"
        "                useFog = True\n"
        "            }\n"
        "            Mods\n"
        "            {\n"
        "                AerialPerspectiveMaterial\n"
        "                {\n"
        "                    atmosphereDepth = 5000\n"
        "                    DEBUG_SetEveryFrame = False\n"
        "                    globalDensity = -7.5E-06\n"
        "                    heightFalloff = 0.2\n"
        "                    oceanDepth = 0\n"
        "                    order = 100\n"
        "                    enabled = True\n"
        "                    name = _Material_AerialPerspective\n"
        "                }\n"
        "                OceanFX\n"
        "                {\n"
        "                    angle = 0\n"
        "                    blendA = 0\n"
        "                    blendB = 0\n"
        "                    framesPerSecond = 10\n"
        "                    oceanOpacity = 0\n"
        "                    spaceAltitude = 0\n"
        "                    spaceSurfaceBlend = 0\n"
        "                    specColor = 0,0,0,0\n"
        "                    texBlend = 0\n"
        "                    txIndex = 0\n"
        "                    order = 100\n"
        "                    enabled = True\n"
        "                    name = OceanFX\n"
        "                    Watermain\n"
        "                    {\n"
        "                        value = BUILTIN/sea-water1\n"
        "                        value = BUILTIN/sea-water2\n"
        "                        value = BUILTIN/sea-water3\n"
        "                        value = BUILTIN/sea-water4\n"
        "                        value = BUILTIN/sea-water5\n"
        "                        value = BUILTIN/sea-water6\n"
        "                        value = BUILTIN/sea-water7\n"
        "                        value = BUILTIN/sea-water8\n"
        "                        value = BUILTIN/sea-water1\n"
        "                    }\n"
        "                }\n"
        "            }\n"
        "        }\n"
        )
    if atmo == "Atmospheric":
        planetCfg.write(
            "        Atmosphere\n"
            "        {\n"
            "            enabled = true\n"
        )
        if oxygen == True:
            planetCfg.write(
                "            oxygen = true\n"
            )
        else:
            planetCfg.write(
                "            oxygen = false\n"
            )
        planetCfg.write(
            "            ambientColor = RGBA(" + str(sctrClrR/5) + ", " + str(sctrClrG/5) + ", " + str(sctrClrB/5) + ", 100" + ")\n"
            "            altitude = " + str(atmoHeight) + "\n"
            "            pressureCurveIsNormalized = false\n"
            "            staticPressureASL = " + str(atmoPress) + "\n"
            "            temperatureSeaLevel = " + str(finalTemp) + "\n"
            "            pressureCurve\n"
            "            {\n"
            "                key = 0 " + str(atmoPress) + " 0 " + str((-8E-05*atmoPress)/(atmoHeight/70000)) + "\n"
            "                key = " + str(atmoHeight/2) + " " + str(atmoPress/20) + " " + str((-5E-06*atmoPress)/(atmoHeight/70000)) + " " + str((-5E-06*atmoPress)/(atmoHeight/70000)) + "\n"
            "                key = " + str(atmoHeight) + " 0 0 0\n"
            "            }\n"
        )
        # This is based off BS science but it works so who cares. (I am NOT making a 1000 line calculator for this.)
        if oxygen == True:
            planetCfg.write(
                "            temperatureCurve\n"
                "            {\n"
                "                key = " + str(0)               + " " + str(finalTemp) + " 0 0\n"
                "                key = " + str(atmoHeight*0.25) + " " + str(finalTemp/1.35849056) + " 0 0\n"
                "                key = " + str(atmoHeight*0.75) + " " + str(finalTemp/1.09923664) + " 0 0\n"
                "                key = " + str(atmoHeight)      + " " + str(finalTemp/1.5483871) + " 0 0\n"
                "            }\n"
            )
        else:
            planetCfg.write(
                "            temperatureCurve\n"
                "            {\n"
                "                key = " + str(0)               + " " + str(finalTemp) + " 0 0\n"
                "                key = " + str(atmoHeight*0.25) + " " + str(finalTemp/1.24137931) + " 0 0\n"
                "                key = " + str(atmoHeight*0.75) + " " + str(finalTemp/1.6) + " 0 0\n"
                "                key = " + str(atmoHeight)      + " " + str(finalTemp/1.30909090909) + " 0 0\n"
                "            }\n"
            )
        planetCfg.write(
            "            temperatureSunMultCurve\n"
            "            {\n"
            "                key = 0 0 0 0\n"
            "                key = 35000 0 0 0\n"
            "            }\n"
            "            AtmosphereFromGround\n"
            "            {"
            "                DEBUG_alwaysUpdateAll = False\n"
            "                doScale = False\n"
            "                waveLength = RGBA(" + str(atmClrR+75) + ", " + str(atmClrG+75) + ", " + str(atmClrB+75) + ", 100" + ")\n"
            "                samples = 4\n"
            "		 		 innerRadius = 595626.9\n"
            "                outerRadius = 635865.6\n"
            "                innerRadiusMult = 0.9563388\n"
            "                outerRadiusMult = 1.045001\n"
            "                transformScale = 1.095,1.095,1.095\n"
            "            }\n"
            "        }\n"
        )
    if gasGiant == False:
        planetCfg.write(
            "        PQS\n"
            "        {\n"
            "            minLevel = 2\n"
        )
        if planetRadius < 30000:
            planetCfg.write(
                "            maxLevel = 5\n"
            )
        else:
            planetCfg.write(
                "            maxLevel = 10\n"
            )
        planetCfg.write(
            "            minDetailDistance = 8\n"
            "            maxQuadLengthsPerFrame = 0.03\n"
            "            fadeStart = 20000\n"
            "            fadeEnd = 120000\n"
            "            deactivateAltitude = 140000\n"
            "            mapMaxHeight = 20000\n"
            "            materialType = AtmosphericTriplanarZoomRotation\n"
            "            allowFootprints = True\n"
            "            Material\n"
            "            {\n"
            "                factor = 10\n"
            "                factorBlendWidth = 0.05\n"
            "                factorRotation = 135\n"
            "                saturation = 1.4\n"
            "                contrast = 1.3\n"
            "                tintColor = 1,1,1,1\n"
            "                specularColor = 0.1,0.1,0.1,1\n"
            "                albedoBrightness = 1.5\n"
            "                steepPower = 2\n"
            "                steepTexStart = 10000\n"
            "                steepTexEnd = 200000\n"
            "                steepTex = BUILTIN/ikeSteep_diffuse\n"
            "                steepTexScale = 1,1\n"
            "                steepTexOffset = 0,0\n"
            "                steepBumpMap = BUILTIN/ikeSteep_nrm\n"
            "                steepBumpMapScale = 1,1\n"
            "                steepBumpMapOffset = 0,0\n"
            "                steepNearTiling = 50\n"
            "                steepTiling = 50\n"
            "                midTex = BUILTIN/gillyMedTerrain_diffuse\n"
            "                midTexScale = 1,1\n"
            "                midTexOffset = 0,0\n"
            "                midTiling = 150000\n"
            "                midBumpMap = BUILTIN/gillyMedTerrain_nrm\n"
            "                midBumpMapScale = 1,1\n"
            "                midBumpMapOffset = 0,0\n"
            "                midBumpTiling = 150000\n"
            "                lowStart = -1\n"
            "                lowEnd = -1\n"
            "                highStart = 2\n"
            "                highEnd = 2\n"
            "                globalDensity = 1\n"
            "                planetOpacity = 0\n"
            "                oceanFogDistance = 1000\n"
            "            }\n"
            "            Mods\n"
            "            {\n"
            "                VertexMitchellNetravaliHeightMap:NEEDS[VertexMitchellNetravaliHeightMap]\n"
            "                {\n"
        )
        if canConvertToDDS == False:
            planetCfg.write(
                "                    map = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_HGT" + ".png" + "\n"
            )
        else:
            planetCfg.write(
                "                    map = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_HGT" + ".dds" + "\n"
            )
        if ocean == True:
            if tidallyLocked == True and moon == False:
                planetCfg.write(
                    "                    offset = -1300\n"   
                )
            else:
                planetCfg.write(
                    "                    offset = " + str((((oceanFactor/255)*8000)*-1)-50) + "\n"   
                )
        else:
            planetCfg.write(
                "                    offset = 0\n"   
            )
        if ocean == True:
            planetCfg.write(
                "                    deformity = 8000\n"
                "                    scaleDeformityByRadius = False\n"
            )
        else:
            if planetRadius < 30000:
                planetCfg.write(
                    "                    deformity = 10000\n"
                    "                    scaleDeformityByRadius = True\n"
                )
            else:
                planetCfg.write(
                    "                    deformity = 8000\n"
                    "                    scaleDeformityByRadius = True\n"
                )
        planetCfg.write(
            "                    order = 10\n"
            "                    enabled = True\n"
            "                    B = 1\n"
            "                    C = 0\n"
            "                }\n"
            "\n"
            "                VertexHeightMap:NEEDS[!VertexMitchellNetravaliHeightMap]\n"
            "                {\n"
        )
        if canConvertToDDS == False:
            planetCfg.write(
                "                    map = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_HGT" + ".png" + "\n"
            )
        else:
            planetCfg.write(
                "                    map = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_HGT" + ".dds" + "\n"
            )
        if ocean == True:
            if tidallyLocked == True and moon == False:
                planetCfg.write(
                    "                    offset = -1300\n"   
                )
            else:
                planetCfg.write(
                    "                    offset = " + str((((oceanFactor/255)*8000)*-1)-50) + "\n"  
                )
        else:
            planetCfg.write(
                "                    offset = 0\n"   
            )
        if ocean == True:
            planetCfg.write(
                "                    deformity = 8000\n"
                "                    scaleDeformityByRadius = False\n"
            )
        else:
            planetCfg.write(
                "                    deformity = 8000\n"
                "                    scaleDeformityByRadius = True\n"
            )
        planetCfg.write(
            "                    order = 10\n"
            "                    enabled = True\n"
            "                }\n"
            "                VertexColorMap\n"
            "                {\n"
        )
        if ocean == True:
            if canConvertToDDS == True:
                planetCfg.write(
                    "                    map = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_VERTCLR" + ".dds" + "\n"
                )
            else:
                planetCfg.write(
                    "                    map = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_VERTCLR" + ".png" + "\n"
                )
        else:
            if canConvertToDDS == True:
                planetCfg.write(
                    "                    map = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_CLR" + ".dds" + "\n"
                )
            else:
                planetCfg.write(
                    "                    map = InfiniteDiscoveries/Textures/PluginData/" + planetName + "_CLR" + ".png" + "\n"
                )
        planetCfg.write(
            "                   order = 20\n"
            "                   enabled = true\n"
            "                }\n"
        )
        if ocean == False:
            if planetRadius < 30000:
                planetCfg.write(
                    "                VertexHeightNoiseVertHeightCurve2\n"
                    "                {\n"
                    "                    deformity = 200\n"
                    "                    ridgedAddFrequency = 32\n"
                    "                    ridgedAddLacunarity = 2\n"
                    "                    ridgedAddOctaves = 8\n"
                    "                    ridgedAddSeed = 456352342\n"
                    "                    ridgedMode = Low\n"
                    "                    ridgedSubFrequency = 32\n"
                    "                    ridgedSubLacunarity = 2\n"
                    "                    ridgedSubOctaves = 8\n"
                    "                    ridgedSubSeed = 234352\n"
                    "                    simplexFrequency = 32\n"
                    "                    simplexHeightEnd = 6000\n"
                    "                    simplexHeightStart = 0\n"
                    "                    simplexOctaves = 8\n"
                    "                    simplexPersistence = 0.5\n"
                    "                    simplexSeed = 345463425\n"
                    "                    order = 40\n"
                    "                    enabled = True\n"
                    "                    simplexCurve\n"
                    "                    {\n"
                    "                        key = 0 0 0 0\n"
                    "                        key = 0.6311918 0.4490898 1.432598 1.432598\n"
                    "                        key = 1 1 0 0\n"
                    "                    }\n"
                    "                }\n"
                )
            else:
                planetCfg.write(
                    "                VertexHeightNoiseVertHeightCurve2\n"
                    "                {\n"
                    "                    deformity = 2000\n"
                    "                    ridgedAddFrequency = 64\n"
                    "                    ridgedAddLacunarity = 2\n"
                    "                    ridgedAddOctaves = 8\n"
                    "                    ridgedAddSeed = 456352342\n"
                    "                    ridgedMode = Low\n"
                    "                    ridgedSubFrequency = 64\n"
                    "                    ridgedSubLacunarity = 2\n"
                    "                    ridgedSubOctaves = 8\n"
                    "                    ridgedSubSeed = 234352\n"
                    "                    simplexFrequency = 64\n"
                    "                    simplexHeightEnd = 6000\n"
                    "                    simplexHeightStart = 0\n"
                    "                    simplexOctaves = 8\n"
                    "                    simplexPersistence = 0.5\n"
                    "                    simplexSeed = 345463425\n"
                    "                    order = 40\n"
                    "                    enabled = True\n"
                    "                    simplexCurve\n"
                    "                    {\n"
                    "                        key = 0 0 0 0\n"
                    "                        key = 0.6311918 0.4490898 1.432598 1.432598\n"
                    "                        key = 1 1 0 0\n"
                    "                    }\n"
                    "                }\n"
                )
        else:
            planetCfg.write(
                "                VertexHeightNoiseVertHeightCurve2\n"
                "                {\n"
                "                    deformity = 1000\n"
                "                    ridgedAddFrequency = 64\n"
                "                    ridgedAddLacunarity = 2\n"
                "                    ridgedAddOctaves = 8\n"
                "                    ridgedAddSeed = 456352342\n"
                "                    ridgedMode = Low\n"
                "                    ridgedSubFrequency = 64\n"
                "                    ridgedSubLacunarity = 2\n"
                "                    ridgedSubOctaves = 8\n"
                "                    ridgedSubSeed = 234352\n"
                "                    simplexFrequency = 64\n"
                "                    simplexHeightEnd = 6000\n"
                "                    simplexHeightStart = 0\n"
                "                    simplexOctaves = 8\n"
                "                    simplexPersistence = 0.5\n"
                "                    simplexSeed = 345463425\n"
                "                    order = 40\n"
                "                    enabled = True\n"
                "                    simplexCurve\n"
                "                    {\n"
                "                        key = 0 0 0 0\n"
                "                        key = 0.6311918 0.4490898 1.432598 1.432598\n"
                "                        key = 1 1 0 0\n"
                "                    }\n"
                "                }\n"
            )
        if anomaly == "fltStrc":
            planetCfg.write(
            "                City2\n"
            "                {\n"
            "                    snapToSurface = True\n"
            "                    alt = 2000\n"
            "                    lat = " + str(anLatLon[0]) + "\n"
            "                    lon = " + str(anLatLon[1]) + "\n"
            "                    objectName = Gravity Deflector\n"
            "                    up = 0,1,0\n"
            "                    rotation = 0\n"
            "                    snapHeightOffset = 0\n"
            "                    commnetStation = False\n"
            "                    isKSC = False\n"
            "                    order = 100\n"
            "                    enabled = True\n"
            "                    name = floatyBoi\n"
            "                    LOD\n"
            "                    {\n"
            "                        Value\n"
            "                        {\n"
            "                            visibleRange = 30000\n"
            "                            keepActive = False\n"
            "                            model = InfiniteDiscoveries/Objects/floatingStrucutre/floatyBoi\n"
            "                            scale = 10,10,10\n"
            "                            delete = False\n"
            "                        }\n"
            "                    }\n"
            "                }\n"
            )
        if anomaly == "crshShp":
            planetCfg.write(
            "                City2\n"
            "                {\n"
            "                    snapToSurface = True\n"
            "                    alt = 2651.57348651835\n"
            "                    lat = " + str(anLatLon[0]) + "\n"
            "                    lon = " + str(anLatLon[1]) + "\n"
            "                    objectName = Crashed Ship\n"
            "                    up = 0,1,0\n"
            "                    rotation = 0\n"
            "                    snapHeightOffset = 0\n"
            "                    commnetStation = False\n"
            "                    isKSC = False\n"
            "                    order = 100\n"
            "                    enabled = True\n"
            "                    name = crashedShip\n"
            "                    LOD\n"
            "                    {\n"
            "                        Value\n"
            "                        {\n"
            "                            visibleRange = 30000\n"
            "                            keepActive = False\n"
            "                            model = InfiniteDiscoveries/Objects/spaceship/spaceship\n"
            "                            scale = 10,10,10\n"
            "                            delete = False\n"
            "                        }\n"
            "                    }\n"
            "                }\n"
            )
        planetCfg.write(
            "                LandControl\n"
            "                {\n"
            "                    altitudeBlend = 0.01\n"
            "                    altitudeFrequency = 2\n"
            "                    altitudeOctaves = 2\n"
            "                    altitudePersistance = 0.5\n"
            "                    altitudeSeed = 53453\n"
            "                    createColors = True\n"
            "                    createScatter = True\n"
            "                    latitudeBlend = 0.05\n"
            "                    latitudeFrequency = 12\n"
            "                    latitudeOctaves = 6\n"
            "                    latitudePersistance = 0.5\n"
            "                    latitudeSeed = 53456345\n"
            "                    longitudeBlend = 0.05\n"
            "                    longitudeFrequency = 12\n"
            "                    longitudeOctaves = 4\n"
            "                    longitudePersistance = 0.5\n"
            "                    longitudeSeed = 98888\n"
            "                    useHeightMap = False\n"
            "                    vHeightMax = 6000\n"
            "                    order = 100\n"
            "                    enabled = True\n"
            "                    name = LCExample\n"
            "                    landClasses\n"
            "                    {\n"
            "                        Value\n"
            "                        {\n"
            "                            alterApparentHeight = 0\n"
            "                            alterRealHeight = 0\n"
            "                            color = 0,0,0,1\n"
            "                            coverageBlend = 1\n"
            "                            coverageFrequency = 1.5\n"
            "                            coverageOctaves = 4\n"
            "                            coveragePersistance = 0.5\n"
            "                            coverageSeed = 171214\n"
            "                            name = Base\n"
            "                            latDelta = 1\n"
            "                            latitudeDouble = False\n"
            "                            lonDelta = 1\n"
            "                            minimumRealHeight = 0\n"
            "                            noiseBlend = 0.5\n"
            "                            noiseColor = 0,0,0,1\n"
            "                            noiseFrequency = 8\n"
            "                            noiseOctaves = 4\n"
            "                            noisePersistance = 0.5\n"
            "                            noiseSeed = 453737\n"
            "                            delete = False\n"
            "                            altitudeRange\n"
            "                            {\n"
            "                                endEnd = 1\n"
            "                                endStart = 0.5\n"
            "                                startEnd = 0.5\n"
            "                                startStart = 0\n"
            "                            }\n"
            "                            latitudeRange\n"
            "                            {\n"
            "                                endEnd = 0.8\n"
            "                                endStart = 0.75\n"
            "                                startEnd = 0.25\n"
            "                                startStart = 0.2\n"
            "                            }\n"
            "                            longitudeRange\n"
            "                            {\n"
            "                                endEnd = 2\n"
            "                                endStart = 2\n"
            "                                startEnd = -1\n"
            "                                startStart = -1\n"
            "                            }\n"
            "                        }\n"
            "                    }\n"
            "                }\n"
            "            }\n"
            "        }\n"
        )
    if Lava == True:
        planetCfg.write(
            "        HazardousBody\n"
            "        {\n"
            "            Item\n"
            "            {\n"
            "                biomeName = Lava\n"
            "                ambientTemp = 2000\n"
            "                AltitudeCurve\n"
            "                {\n"
            "                    key = " + str(planetRadius) + " 1\n"
            "                    key = " + str(planetRadius + 1500) + " 0\n"
            "                }\n"
            "            }\n"
            "        }\n"
        )
    planetCfg.write(
        "    }\n"
        "}\n"
    )
    allActions.append([time.localtime(),"Wrote config for body : " + planetName])
    state.allActionArrayUpdated = True